/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// @ts-nocheck

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useGSAP } from "@gsap/react";
import { is } from "@react-three/fiber/dist/declarations/src/core/utils";

type GLTFResult = GLTF & {
  nodes: {
    armLeft_1: THREE.Mesh;
    armLeft_2: THREE.Mesh;
    armLeft_3: THREE.Mesh;
    armRight_1: THREE.Mesh;
    armRight_2: THREE.Mesh;
    armRight_3: THREE.Mesh;
    legLeft_1: THREE.Mesh;
    legLeft_2: THREE.Mesh;
    body_1: THREE.Mesh;
    body_2: THREE.Mesh;
    body_3: THREE.Mesh;
    legRight_1: THREE.Mesh;
    legRight_2: THREE.Mesh;
    Group_122_1: THREE.Mesh;
    Group_122_2: THREE.Mesh;
    Group_122001: THREE.Mesh;
  };
  materials: {
    ["textile.002"]: THREE.MeshStandardMaterial;
    ["wood.015"]: THREE.MeshStandardMaterial;
    textileRed: THREE.MeshStandardMaterial;
    _defaultMat: THREE.MeshStandardMaterial;
    ["sand.003"]: THREE.MeshStandardMaterial;
    ["iron.005"]: THREE.MeshStandardMaterial;
  };
};

type PirateCapProps = JSX.IntrinsicElements["group"] & {
  scrollTween: gsap.core.Tween;
};

export default function PirateCap(props: PirateCapProps) {
  const [mounted, setMounted] = useState(false);
  const group = useRef<THREE.Group>();
  const bodyRef = useRef<THREE.Group>();
  const leftHandRef = useRef<THREE.Group>();
  const rightHandRef = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/models/PirateCap.gltf") as GLTFResult;

  useGSAP(() => {
    if (mounted) return;
    if (!props.scrollTween || !group.current) return;

    const isMobile = window.innerWidth < 480;
    if (isMobile) return;

    setMounted(true);
    gsap.registerPlugin(ScrollTrigger);
    const g = group.current;
    const body = bodyRef.current!;
    const leftHand = leftHandRef.current!;
    const rightHand = rightHandRef.current!;

    gsap
      .timeline({
        scrollTrigger: {
          trigger: "#Music",
          start: "20% bottom",
          end: "50% bottom",
          containerAnimation: props.scrollTween,
          scrub: true,
        },
      })
      .from(g.position, {
        y: -1.5,
      })
      .to(
        leftHand.rotation,
        {
          x: 2,
        },
        "+=2",
      );

    // move to the center
    gsap
      .timeline({
        scrollTrigger: {
          trigger: "#Music",
          start: "77% bottom",
          end: "50% center",
          containerAnimation: props.scrollTween,
          scrub: true,
          anticipatePin: 1,
        },
      })
      .to(g?.position, {
        x: 1.25,
      })
      .to(
        body.position,
        {
          y: -1.5,
          z: 4,
        },
        "<",
      )
      .to(
        [leftHand.rotation, rightHand.rotation],
        {
          x: 3,
        },
        "<",
      )
      .to(
        body.rotation,
        {
          y: 3.1,
        },
        "<",
      );

    // move out of the screen
    gsap.to(body.position, {
      y: -2.8,
      scrollTrigger: {
        trigger: "#Music",
        start: "96% bottom",
        end: "bottom 55%",
        containerAnimation: props.scrollTween,
        scrub: true,
        anticipatePin: 1,
      },
    });
  }, [props.scrollTween]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group ref={bodyRef} position={[-1.2, -1.5, 3.5]} rotation={[0, 4, 0]}>
        <group
          ref={leftHandRef}
          position={[-0.17, 0.7, 0]}
          rotation={[0, 0, 0]}
        >
          <mesh
            geometry={nodes.armLeft_1.geometry}
            material={nodes.armLeft_1.material}
          />
          <mesh
            geometry={nodes.armLeft_2.geometry}
            material={nodes.armLeft_2.material}
          />
          <mesh
            geometry={nodes.armLeft_3.geometry}
            material={nodes.armLeft_3.material}
          />
        </group>
        <group
          ref={rightHandRef}
          position={[0.17, 0.7, 0]}
          rotation={[0, 0, 0]}
        >
          <mesh
            geometry={nodes.armRight_1.geometry}
            material={nodes.armRight_1.material}
          />
          <mesh
            geometry={nodes.armRight_2.geometry}
            material={nodes.armRight_2.material}
          />
          <mesh
            geometry={nodes.armRight_3.geometry}
            material={nodes.armRight_3.material}
          />
        </group>
        <group position={[-0.16, 0.41, 0]}>
          <mesh
            geometry={nodes.legLeft_1.geometry}
            material={nodes.legLeft_1.material}
          />
          <mesh
            geometry={nodes.legLeft_2.geometry}
            material={nodes.legLeft_2.material}
          />
        </group>
        <group position={[0, 0.41, 0]}>
          <mesh
            geometry={nodes.body_1.geometry}
            material={nodes.body_1.material}
          />
          <mesh
            geometry={nodes.body_2.geometry}
            material={nodes.body_2.material}
          />
          <mesh
            geometry={nodes.body_3.geometry}
            material={materials._defaultMat}
          />
        </group>
        <group position={[0.16, 0.41, 0]}>
          <mesh
            geometry={nodes.legRight_1.geometry}
            material={nodes.legRight_1.material}
          />
          <mesh
            geometry={nodes.legRight_2.geometry}
            material={nodes.legRight_2.material}
          />
        </group>
        <group position={[0, 0.78, 0]}>
          <mesh
            geometry={nodes.Group_122_1.geometry}
            material={materials["sand.003"]}
          />
          <mesh
            geometry={nodes.Group_122_2.geometry}
            material={nodes.Group_122_2.material}
          />
          <mesh
            geometry={nodes.Group_122001.geometry}
            material={materials["iron.005"]}
            position={[0.19, 0.21, -0.25]}
            rotation={[0.07, 0, 0]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/PirateCap.gltf");
